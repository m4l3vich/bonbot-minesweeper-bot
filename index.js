import { VK } from 'vk-io'
import { HearManager } from '@vk-io/hear'

import { Constraint } from './constraints'

const BOTBON_ID = 183202890

const vk = new VK({
  token: process.env.TOKEN
})

const db = new Map() // { peerid: { start, used: [Number], [constraints] } }

const hearManager = new HearManager()
vk.updates.on('message_new', hearManager.middleware)

hearManager.hear('!peerid', async ctx => ctx.send(ctx.peerId))

hearManager.hear('!minesweep', async ctx => {
  if (db.get(ctx.peerId)) return ctx.send('—â–∞ –ø–∞–¥–∞–∂–∂–∏')
  return ctx.send('/–ø–∏–Ω –Ω–∞—á–∞—Ç—å')
})

vk.updates.on('message_new', async ctx => {
  if (ctx.senderId !== -BOTBON_ID) return

  const regex1 = /üß® –ü–æ—Ö–æ–∂–µ —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–º–±—É –Ω—É–∂–µ–Ω —á–µ—Ç—ã—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–π –ø–∏–Ω–∫–æ–¥\.\n‚ú® –ï—Å—Ç—å –¥–æ–≥–∞–¥–∫–∏, —á—Ç–æ: (.+)\./
  const regex2 = /üí¢ –ü–∏–Ω–∫–æ–¥ –Ω–µ –ø–æ–¥–æ—à—ë–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ\.\nüî¢ (.+)\n‚ô• –î–æ –≤–∑—Ä—ã–≤–∞: (‚öô+)/
  const regexWin = /‚úî –ü–∏–Ω–∫–æ–¥ –ø–æ–¥–æ—à—ë–ª!/

  if (regex1.test(ctx.text)) {
    const constraintText = ctx.text.match(regex1)[1]
    const constraint = new Constraint(constraintText)

    const possible = Array(9000).fill(0)
      .map((e, i) => i + 1000)
      .filter(e => constraint.filter(e))

    const attempt = possible[Math.floor(Math.random() * possible.length)]

    db.set(ctx.peerId, {
      start: Date.now(),
      used: [attempt],
      constraints: [constraint]
    })

    return ctx.send(`/–ø–∏–Ω ${attempt} (–µ—â—ë ${possible.length - 1} —á–∏—Å–µ–ª)`)
  } else if (regex2.test(ctx.text)) {
    const match = ctx.text.match(regex2)
    const constraintText = match[1]

    const attempts = match[2].length
    if (attempts === 1) return ctx.send('–Ω—É —è —Ö—É–π –∑–Ω–∞–µ—Ç —Ç–æ–≥–¥–∞')

    const constraint = new Constraint(constraintText)
    const dbObj = db.get(ctx.peerId)

    dbObj.constraints.push(constraint)

    let possible = Array(9000).fill(0)
      .map((e, i) => i + 1000)
      .filter(e => !dbObj.used.includes(e))

    dbObj.constraints.forEach(constraint => {
      possible = possible.filter(e => constraint.filter(e))
    })

    const attempt = possible[Math.floor(Math.random() * possible.length)]

    if (!attempt) return ctx.send('—è —Ö–∑')

    dbObj.used.push(attempt)

    return ctx.send(`/–ø–∏–Ω ${attempt} (–µ—â—ë ${possible.length - 1} —á–∏—Å–µ–ª, –µ—Å—Ç—å ${dbObj.constraints.length} –ø–æ–¥—Å–∫–∞–∑–æ–∫)`)
  } else if (regexWin.test(ctx.text)) {
    const dbObj = db.get(ctx.peerId)
    return ctx.send(`GG –∑–∞ ${dbObj.used.length} –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–∑—ä–µ–±–∞–ª –ª–æ–ª`)
  }
})

vk.updates.start().catch(console.error)
